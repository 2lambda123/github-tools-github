{"version":3,"sources":["github.min.js"],"names":["root","factory","define","amd","Promise","Base64","Utf8","axios","Github","module","exports","require","base64","utf8","this","b64encode","string","encode","polyfill","options","API_URL","apiUrl","_request","method","path","data","cb","raw","getURL","url","indexOf","test","param","hasOwnProperty","encodeURIComponent","window","Date","getTime","config","headers","Accept","Content-Type","username","password","token","then","response","request","status","error","_requestAllPages","results","iterate","err","res","xhr","Array","push","apply","links","getResponseHeader","split","next","forEach","link","exec","User","repos","arguments","length","params","type","sort","per_page","page","join","orgs","gists","notifications","all","participating","since","constructor","toISOString","before","show","command","userRepos","userStarred","userGists","orgRepos","orgname","follow","unfollow","createRepo","getUserData","Organization","checkMembership","organization","listMembers","listRepos","Repository","updateTree","branch","currentTree","sha","that","getRef","repoPath","repo","name","user","fullname","ref","object","createRef","deleteRef","deleteRepo","listTags","listPulls","state","head","base","direction","getPull","number","compare","listBranches","heads","map","replace","getBlob","getCommit","getSha","pathContent","getStatuses","getTree","tree","postBlob","content","encoding","baseTree","blob","base_tree","mode","postTree","commit","parent","message","userData","author","email","parents","updateHead","contributors","retry","setTimeout","contents","encodeURI","fork","listForks","oldBranch","newBranch","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","obj","remove","move","newPath","latestCommit","rootTree","write","writeOptions","committer","undefined","getCommits","until","perpage","isStarred","owner","repository","star","unstar","Gist","gistPath","create","update","Issue","list","query","key","comment","issue","comments_url","body","Search","repositories","code","issues","users","getIssues","getRepo","getUser","getOrg","getGist","getSearch"],"mappings":"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","file":"github.min.js","sourcesContent":["/*!\n * @overview  Github.js\n *\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\n *            Github.js is freely distributable.\n *\n * @license   Licensed under BSD-3-Clause-Clear\n *\n *            For all details and documentation:\n *            http://substance.io/michael/github\n */\n'use strict';\n\n(function (root, factory) {\n   /* istanbul ignore next */\n   if (typeof define === 'function' && define.amd) {\n      define(['es6-promise', 'base-64', 'utf8', 'axios'], function (Promise, Base64, Utf8, axios) {\n         return (root.Github = factory(Promise, Base64, Utf8, axios));\n      });\n   } else if (typeof module === 'object' && module.exports) {\n      module.exports = factory(require('es6-promise'), require('base-64'), require('utf8'), require('axios'));\n   } else {\n      root.Github = factory(root.Promise, root.base64, root.utf8, root.axios);\n   }\n}(this, function(Promise, Base64, Utf8, axios) {\n   function b64encode(string) {\n      return Base64.encode(Utf8.encode(string));\n   }\n\n   if (Promise.polyfill) {\n      Promise.polyfill();\n   }\n\n   // Initial Setup\n   // -------------\n\n   var Github = function (options) {\n      var API_URL = options.apiUrl || 'https://api.github.com';\n\n      // HTTP Request Abstraction\n      // =======\n      //\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\n\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\n         function getURL() {\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\n\n            url += ((/\\?/).test(url) ? '&' : '?');\n\n            if (data && typeof data === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\n               for (var param in data) {\n                  if (data.hasOwnProperty(param))\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\n               }\n            }\n\n            return url + (typeof window !== 'undefined' ? '&' + new Date().getTime() : '');\n         }\n\n         var config = {\n            headers: {\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n               'Content-Type': 'application/json;charset=UTF-8'\n            },\n            method: method,\n            data: data ? data : {},\n            url: getURL()\n         };\n\n         if ((options.token) || (options.username && options.password)) {\n            config.headers['Authorization'] = options.token ?\n            'token ' + options.token :\n            'Basic ' + b64encode(options.username + ':' + options.password);\n         }\n\n         return axios(config)\n            .then(function (response) {\n               cb(\n                  null,\n                  response.data || true,\n                  response.request\n               );\n            }, function (response) {\n               if (response.status === 304) {\n                  cb(\n                     null,\n                     response.data || true,\n                     response.request\n                  );\n               } else {\n                  cb({\n                     path: path,\n                     request: response.request,\n                     error: response.status\n                  });\n               }\n            });\n      };\n\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, cb) {\n         var results = [];\n\n         (function iterate() {\n            _request('GET', path, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (!(res instanceof Array)) {\n                  res = [res];\n               }\n\n               results.push.apply(results, res);\n\n               var links = (xhr.getResponseHeader('link') || '').split(/\\s*,\\s*/g);\n               var next = null;\n\n               links.forEach(function (link) {\n                  next = /rel=\"next\"/.test(link) ? link : next;\n               });\n\n               if (next) {\n                  next = (/<(.*)>/.exec(next) || [])[1];\n               }\n\n               if (!next) {\n                  cb(err, results);\n               } else {\n                  path = next;\n                  iterate();\n               }\n            });\n         })();\n      };\n\n      // User API\n      // =======\n\n      Github.User = function () {\n         this.repos = function (options, cb) {\n            if (arguments.length === 1 && typeof arguments[0] === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n\n            var url = '/user/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _request('GET', url, null, cb);\n         };\n\n         // List user organizations\n         // -------\n\n         this.orgs = function (cb) {\n            _request('GET', '/user/orgs', null, cb);\n         };\n\n         // List authenticated user's gists\n         // -------\n\n         this.gists = function (cb) {\n            _request('GET', '/gists', null, cb);\n         };\n\n         // List authenticated user's unread notifications\n         // -------\n\n         this.notifications = function (options, cb) {\n            if (arguments.length === 1 && typeof arguments[0] === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n            var url = '/notifications';\n            var params = [];\n\n            if (options.all) {\n               params.push('all=true');\n            }\n\n            if (options.participating) {\n               params.push('participating=true');\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.before) {\n               var before = options.before;\n\n               if (before.constructor === Date) {\n                  before = before.toISOString();\n               }\n\n               params.push('before=' + encodeURIComponent(before));\n            }\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Show user information\n         // -------\n\n         this.show = function (username, cb) {\n            var command = username ? '/users/' + username : '/user';\n\n            _request('GET', command, null, cb);\n         };\n\n         // List user repositories\n         // -------\n\n         this.userRepos = function (username, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/users/' + username + '/repos?type=all&per_page=100&sort=updated', cb);\n         };\n\n         // List user starred repositories\n         // -------\n\n         this.userStarred = function (username, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/users/' + username + '/starred?type=all&per_page=100', cb);\n         };\n\n         // List a user's gists\n         // -------\n\n         this.userGists = function (username, cb) {\n            _request('GET', '/users/' + username + '/gists', null, cb);\n         };\n\n         // List organization repositories\n         // -------\n\n         this.orgRepos = function (orgname, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/orgs/' + orgname + '/repos?type=all&&page_num=1000&sort=updated&direction=desc', cb);\n         };\n\n         // Follow user\n         // -------\n\n         this.follow = function (username, cb) {\n            _request('PUT', '/user/following/' + username, null, cb);\n         };\n\n         // Unfollow user\n         // -------\n\n         this.unfollow = function (username, cb) {\n            _request('DELETE', '/user/following/' + username, null, cb);\n         };\n\n         // Create a repo\n         // -------\n         this.createRepo = function (options, cb) {\n            _request('POST', '/user/repos', options, cb);\n         };\n\n         // Get another user by username\n         // -------\n\n         this.getUserData = function (username, cb) {\n            _request('GET', '/users/'+username, null, cb);\n         }\n\n      };\n\n      // Organization API\n      // =======\n\n      Github.Organization = function () {\n\n         // Check if user is part of organization\n         // -------\n\n         this.checkMembership = function (organization, username, cb) {\n            _request('GET', '/orgs/' + organization + '/members/' + username, null, cb);\n         };\n\n         // List organization members\n         // -------\n\n         this.listMembers = function (organization, cb) {\n            _request('GET', '/orgs/' + organization + '/members', null, cb);\n         };\n\n         // List organization repos\n         // -------\n\n         this.listRepos = function (organization, cb) {\n            _request('GET', '/orgs/' + organization + '/repos', null, cb);\n         };\n\n      };\n\n      // Repository API\n      // =======\n\n      Github.Repository = function (options) {\n         var repo = options.name;\n         var user = options.user;\n         var fullname = options.fullname;\n\n         var that = this;\n         var repoPath;\n\n         if (fullname) {\n            repoPath = '/repos/' + fullname;\n         } else {\n            repoPath = '/repos/' + user + '/' + repo;\n         }\n\n         var currentTree = {\n            branch: null,\n            sha: null\n         };\n\n         // Uses the cache if branch has not been changed\n         // -------\n\n         function updateTree(branch, cb) {\n            if (branch === currentTree.branch && currentTree.sha) {\n               return cb(null, currentTree.sha);\n            }\n\n            that.getRef('heads/' + branch, function (err, sha) {\n               currentTree.branch = branch;\n               currentTree.sha = sha;\n               cb(err, sha);\n            });\n         }\n\n         // Get a particular reference\n         // -------\n\n         this.getRef = function (ref, cb) {\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.object.sha, xhr);\n            });\n         };\n\n         // Create a new reference\n         // --------\n         //\n         // {\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n         // }\n\n         this.createRef = function (options, cb) {\n            _request('POST', repoPath + '/git/refs', options, cb);\n         };\n\n         // Delete a reference\n         // --------\n         //\n         // Repo.deleteRef('heads/gh-pages')\n         // repo.deleteRef('tags/v1.0')\n\n         this.deleteRef = function (ref, cb) {\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, cb);\n         };\n\n         // Create a repo\n         // -------\n\n         this.createRepo = function (options, cb) {\n            _request('POST', '/user/repos', options, cb);\n         };\n\n         // Delete a repo\n         // --------\n\n         this.deleteRepo = function (cb) {\n            _request('DELETE', repoPath, options, cb);\n         };\n\n         // List all tags of a repository\n         // -------\n\n         this.listTags = function (cb) {\n            _request('GET', repoPath + '/tags', null, cb);\n         };\n\n         // List all pull requests of a respository\n         // -------\n\n         this.listPulls = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/pulls';\n            var params = [];\n\n            if (typeof options === 'string') {\n               // Backward compatibility\n               params.push('state=' + options);\n            } else {\n               if (options.state) {\n                  params.push('state=' + encodeURIComponent(options.state));\n               }\n\n               if (options.head) {\n                  params.push('head=' + encodeURIComponent(options.head));\n               }\n\n               if (options.base) {\n                  params.push('base=' + encodeURIComponent(options.base));\n               }\n\n               if (options.sort) {\n                  params.push('sort=' + encodeURIComponent(options.sort));\n               }\n\n               if (options.direction) {\n                  params.push('direction=' + encodeURIComponent(options.direction));\n               }\n\n               if (options.page) {\n                  params.push('page=' + options.page);\n               }\n\n               if (options.per_page) {\n                  params.push('per_page=' + options.per_page);\n               }\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Gets details for a specific pull request\n         // -------\n\n         this.getPull = function (number, cb) {\n            _request('GET', repoPath + '/pulls/' + number, null, cb);\n         };\n\n         // Retrieve the changes made between base and head\n         // -------\n\n         this.compare = function (base, head, cb) {\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, cb);\n         };\n\n         // List all branches of a repository\n         // -------\n\n         this.listBranches = function (cb) {\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\n               if (err) return cb(err);\n               cb(null, heads.map(function (head) {\n                  return head.ref.replace(/^refs\\/heads\\//, '');\n               }), xhr);\n            });\n         };\n\n         // Retrieve the contents of a blob\n         // -------\n\n         this.getBlob = function (sha, cb) {\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getCommit = function (branch, sha, cb) {\n            _request('GET', repoPath + '/git/commits/' + sha, null, cb);\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getSha = function (branch, path, cb) {\n            if (!path || path === '') return that.getRef('heads/' + branch, cb);\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''),\n               null, function (err, pathContent, xhr) {\n                  if (err) return cb(err);\n                  cb(null, pathContent.sha, xhr);\n               });\n         };\n\n         // Get the statuses for a particular SHA\n         // -------\n\n         this.getStatuses = function (sha, cb) {\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\n         };\n\n         // Retrieve the tree a commit points to\n         // -------\n\n         this.getTree = function (tree, cb) {\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\n               if (err) return cb(err);\n               cb(null, res.tree, xhr);\n            });\n         };\n\n         // Post a new blob object, getting a blob SHA back\n         // -------\n\n         this.postBlob = function (content, cb) {\n            if (typeof (content) === 'string') {\n               content = {\n                  content: content,\n                  encoding: 'utf-8'\n               };\n            } else {\n               content = {\n                  content: b64encode(content),\n                  encoding: 'base64'\n               };\n            }\n\n            _request('POST', repoPath + '/git/blobs', content, function (err, res) {\n               if (err) return cb(err);\n               cb(null, res.sha);\n            });\n         };\n\n         // Update an existing tree adding a new blob object getting a tree SHA back\n         // -------\n\n         this.updateTree = function (baseTree, path, blob, cb) {\n            var data = {\n               base_tree: baseTree,\n               tree: [\n                  {\n                     path: path,\n                     mode: '100644',\n                     type: 'blob',\n                     sha: blob\n                  }\n               ]\n            };\n\n            _request('POST', repoPath + '/git/trees', data, function (err, res) {\n               if (err) return cb(err);\n               cb(null, res.sha);\n            });\n         };\n\n         // Post a new tree object having a file path pointer replaced\n         // with a new blob SHA getting a tree SHA back\n         // -------\n\n         this.postTree = function (tree, cb) {\n            _request('POST', repoPath + '/git/trees', {\n               tree: tree\n            }, function (err, res) {\n               if (err) return cb(err);\n               cb(null, res.sha);\n            });\n         };\n\n         // Create a new commit object with the current commit SHA as the parent\n         // and the new tree SHA, getting a commit SHA back\n         // -------\n\n         this.commit = function (parent, tree, message, cb) {\n            var user = new Github.User();\n\n            user.show(null, function (err, userData) {\n               if (err) return cb(err);\n               var data = {\n                  message: message,\n                  author: {\n                     name: options.user,\n                     email: userData.email\n                  },\n                  parents: [\n                     parent\n                  ],\n                  tree: tree\n               };\n\n               _request('POST', repoPath + '/git/commits', data, function (err, res) {\n                  if (err) return cb(err);\n                  currentTree.sha = res.sha; // Update latest commit\n                  cb(null, res.sha);\n               });\n            });\n         };\n\n         // Update the reference of your head to point to the new commit SHA\n         // -------\n\n         this.updateHead = function (head, commit, cb) {\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\n               sha: commit\n            }, cb);\n         };\n\n         // Show repository information\n         // -------\n\n         this.show = function (cb) {\n            _request('GET', repoPath, null, cb);\n         };\n\n         // Show repository contributors\n         // -------\n\n         this.contributors = function (cb, retry) {\n            retry = retry || 1000;\n            var that = this;\n\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\n               if (err) return cb(err);\n\n               if (xhr.status === 202) {\n                  setTimeout(\n                     function () {\n                        that.contributors(cb, retry);\n                     },\n                     retry\n                  );\n               } else {\n                  cb(err, data, xhr);\n               }\n            });\n         };\n\n         // Get contents\n         // --------\n\n         this.contents = function (ref, path, cb) {\n            path = encodeURI(path);\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\n               ref: ref\n            }, cb);\n         };\n\n         // Fork repository\n         // -------\n\n         this.fork = function (cb) {\n            _request('POST', repoPath + '/forks', null, cb);\n         };\n\n         // List forks\n         // --------\n\n         this.listForks = function (cb) {\n            _request('GET', repoPath + '/forks', null, cb);\n         };\n\n         // Branch repository\n         // --------\n\n         this.branch = function (oldBranch, newBranch, cb) {\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\n               cb = newBranch;\n               newBranch = oldBranch;\n               oldBranch = 'master';\n            }\n\n            this.getRef('heads/' + oldBranch, function (err, ref) {\n               if (err && cb) return cb(err);\n               that.createRef({\n                  ref: 'refs/heads/' + newBranch,\n                  sha: ref\n               }, cb);\n            });\n         };\n\n         // Create pull request\n         // --------\n\n         this.createPullRequest = function (options, cb) {\n            _request('POST', repoPath + '/pulls', options, cb);\n         };\n\n         // List hooks\n         // --------\n\n         this.listHooks = function (cb) {\n            _request('GET', repoPath + '/hooks', null, cb);\n         };\n\n         // Get a hook\n         // --------\n\n         this.getHook = function (id, cb) {\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Create a hook\n         // --------\n\n         this.createHook = function (options, cb) {\n            _request('POST', repoPath + '/hooks', options, cb);\n         };\n\n         // Edit a hook\n         // --------\n\n         this.editHook = function (id, options, cb) {\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\n         };\n\n         // Delete a hook\n         // --------\n\n         this.deleteHook = function (id, cb) {\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Read file at given path\n         // -------\n\n         this.read = function (branch, path, cb) {\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''),\n               null, function (err, obj, xhr) {\n                  if (err && err.error === 404) return cb('not found', null, null);\n\n                  if (err) return cb(err);\n                  cb(null, obj, xhr);\n               }, true);\n         };\n\n         // Remove a file\n         // -------\n\n         this.remove = function (branch, path, cb) {\n            that.getSha(branch, path, function (err, sha) {\n               if (err) return cb(err);\n               _request('DELETE', repoPath + '/contents/' + path, {\n                  message: path + ' is removed',\n                  sha: sha,\n                  branch: branch\n               }, cb);\n            });\n         };\n\n         // Alias for repo.remove for backwards comapt.\n         // -------\n         this.delete = this.remove;\n\n         // Move a file to a new location\n         // -------\n\n         this.move = function (branch, path, newPath, cb) {\n            updateTree(branch, function (err, latestCommit) {\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\n                  // Update Tree\n                  tree.forEach(function (ref) {\n                     if (ref.path === path) ref.path = newPath;\n\n                     if (ref.type === 'tree') delete ref.sha;\n                  });\n\n                  that.postTree(tree, function (err, rootTree) {\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\n                        that.updateHead(branch, commit, cb);\n                     });\n                  });\n               });\n            });\n         };\n\n         // Write file contents to a given branch and path\n         // -------\n\n         this.write = function (branch, path, content, message, options, cb) {\n            if (typeof cb === 'undefined') {\n               cb = options;\n               options = {};\n            }\n\n            that.getSha(branch, encodeURI(path), function (err, sha) {\n               var writeOptions = {\n                  message: message,\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\n                  branch: branch,\n                  committer: options && options.committer ? options.committer : undefined,\n                  author: options && options.author ? options.author : undefined\n               };\n\n               // If no error, we set the sha to overwrite an existing file\n               if (!(err && err.error !== 404)) writeOptions.sha = sha;\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\n            });\n         };\n\n         // List commits on a repository. Takes an object of optional parameters:\n         // sha: SHA or branch to start listing commits from\n         // path: Only commits containing this file path will be returned\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\n         // since: ISO 8601 date - only commits after this date will be returned\n         // until: ISO 8601 date - only commits before this date will be returned\n         // -------\n\n         this.getCommits = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/commits';\n            var params = [];\n\n            if (options.sha) {\n               params.push('sha=' + encodeURIComponent(options.sha));\n            }\n\n            if (options.path) {\n               params.push('path=' + encodeURIComponent(options.path));\n            }\n\n            if (options.author) {\n               params.push('author=' + encodeURIComponent(options.author));\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.until) {\n               var until = options.until;\n\n               if (until.constructor === Date) {\n                  until = until.toISOString();\n               }\n\n               params.push('until=' + encodeURIComponent(until));\n            }\n\n            if (options.page) {\n               params.push('page=' + options.page);\n            }\n\n            if (options.perpage) {\n               params.push('per_page=' + options.perpage);\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Check if a repository is starred.\n         // --------\n\n         this.isStarred = function(owner, repository, cb) {\n            _request('GET', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Star a repository.\n         // --------\n\n         this.star = function(owner, repository, cb) {\n            _request('PUT', '/user/starred/' + owner + '/' + repository, null, cb)\n         };\n\n         // Unstar a repository.\n         // --------\n\n         this.unstar = function(owner, repository, cb) {\n            _request('DELETE', '/user/starred/' + owner + '/' + repository, null, cb)\n         };\n      };\n\n      // Gists API\n      // =======\n\n      Github.Gist = function (options) {\n         var id = options.id;\n         var gistPath = '/gists/' + id;\n\n         // Read the gist\n         // --------\n\n         this.read = function (cb) {\n            _request('GET', gistPath, null, cb);\n         };\n\n         // Create the gist\n         // --------\n         // {\n         //  \"description\": \"the description for this gist\",\n         //    \"public\": true,\n         //    \"files\": {\n         //      \"file1.txt\": {\n         //        \"content\": \"String file contents\"\n         //      }\n         //    }\n         // }\n\n         this.create = function (options, cb) {\n            _request('POST', '/gists', options, cb);\n         };\n\n         // Delete the gist\n         // --------\n\n         this.delete = function (cb) {\n            _request('DELETE', gistPath, null, cb);\n         };\n\n         // Fork a gist\n         // --------\n\n         this.fork = function (cb) {\n            _request('POST', gistPath + '/fork', null, cb);\n         };\n\n         // Update a gist with the new stuff\n         // --------\n\n         this.update = function (options, cb) {\n            _request('PATCH', gistPath, options, cb);\n         };\n\n         // Star a gist\n         // --------\n\n         this.star = function (cb) {\n            _request('PUT', gistPath + '/star', null, cb);\n         };\n\n         // Untar a gist\n         // --------\n\n         this.unstar = function (cb) {\n            _request('DELETE', gistPath + '/star', null, cb);\n         };\n\n         // Check if a gist is starred\n         // --------\n\n         this.isStarred = function (cb) {\n            _request('GET', gistPath + '/star', null, cb);\n         };\n      };\n\n      // Issues API\n      // ==========\n\n      Github.Issue = function (options) {\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\n\n         this.list = function (options, cb) {\n            var query = [];\n\n            for (var key in options) {\n               if (options.hasOwnProperty(key)) {\n                  query.push(encodeURIComponent(key) + '=' + encodeURIComponent(options[key]));\n               }\n            }\n\n            _requestAllPages(path + '?' + query.join('&'), cb);\n         };\n\n         this.comment = function (issue, comment, cb) {\n            _request('POST', issue.comments_url, {\n               body: comment\n            }, cb);\n         };\n      };\n\n      // Search API\n      // ==========\n\n      Github.Search = function (options) {\n         var path = '/search/';\n         var query = '?q=' + options.query;\n\n         this.repositories = function (options, cb) {\n            _request('GET', path + 'repositories' + query, options, cb);\n         };\n\n         this.code = function (options, cb) {\n            _request('GET', path + 'code' + query, options, cb);\n         };\n\n         this.issues = function (options, cb) {\n            _request('GET', path + 'issues' + query, options, cb);\n         };\n\n         this.users = function (options, cb) {\n            _request('GET', path + 'users' + query, options, cb);\n         };\n      };\n\n      return Github;\n   };\n\n// Top Level API\n// -------\n\n   Github.getIssues = function (user, repo) {\n      return new Github.Issue({\n         user: user,\n         repo: repo\n      });\n   };\n\n   Github.getRepo = function (user, repo) {\n      if (!repo) {\n         return new Github.Repository({\n            fullname: user\n         });\n      } else {\n         return new Github.Repository({\n            user: user,\n            name: repo\n         });\n      }\n   };\n\n   Github.getUser = function () {\n      return new Github.User();\n   };\n\n   Github.getOrg = function() {\n      return new Github.Organization();\n   };\n\n   Github.getGist = function (id) {\n      return new Github.Gist({\n         id: id\n      });\n   };\n\n   Github.getSearch = function (query) {\n      return new Github.Search({\n         query: query\n      });\n   };\n\n   return Github;\n}));\n"],"sourceRoot":"/source/"}