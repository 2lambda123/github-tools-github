{"version":3,"sources":["github.min.js"],"names":["root","factory","define","amd","Promise","Base64","Utf8","axios","Github","module","exports","require","base64","utf8","this","b64encode","string","encode","polyfill","options","API_URL","apiUrl","_request","method","path","data","cb","raw","getURL","url","indexOf","test","param","hasOwnProperty","encodeURIComponent","replace","window","Date","getTime","config","headers","Accept","Content-Type","username","password","Authorization","token","then","response","request","status","error","_requestAllPages","results","iterate","err","res","xhr","Array","push","apply","next","getResponseHeader","split","filter","link","map","exec","pop","User","repos","params","type","sort","per_page","page","join","orgs","gists","notifications","all","participating","since","constructor","toISOString","before","length","show","command","userRepos","userStarred","userGists","orgRepos","orgname","follow","unfollow","createRepo","Repository","updateTree","branch","currentTree","sha","that","getRef","repoPath","repo","name","user","fullname","ref","object","createRef","deleteRef","deleteRepo","listTags","listPulls","state","head","base","direction","getPull","number","compare","listBranches","heads","getBlob","getCommit","getSha","pathContent","getStatuses","getTree","tree","postBlob","content","encoding","baseTree","blob","base_tree","mode","postTree","commit","parent","message","userData","author","email","parents","updateHead","contributors","retry","setTimeout","collaborators","isCollaborator","contents","encodeURI","fork","listForks","oldBranch","newBranch","arguments","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","remove","move","newPath","latestCommit","forEach","rootTree","write","writeOptions","committer","undefined","getCommits","until","perpage","isStarred","owner","repository","star","unstar","createRelease","editRelease","getRelease","deleteRelease","Gist","gistPath","create","update","Issue","list","query","key","comment","issue","comments_url","body","edit","get","Search","repositories","code","issues","users","RateLimit","getRateLimit","getIssues","getRepo","getUser","getGist","getSearch"],"mappings":"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","file":"github.min.js","sourcesContent":["/*!\n * @overview  Github.js\n *\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\n *            Github.js is freely distributable.\n *\n * @license   Licensed under BSD-3-Clause-Clear\n *\n *            For all details and documentation:\n *            http://substance.io/michael/github\n */\n'use strict';\n\n(function (root, factory) {\n   /* istanbul ignore next */\n   if (typeof define === 'function' && define.amd) {\n      define(\n         [\n            'es6-promise',\n            'base-64',\n            'utf8',\n            'axios'\n         ],\n         function (Promise, Base64, Utf8, axios) {\n            return (root.Github = factory(Promise, Base64, Utf8, axios));\n         }\n      );\n   } else if (typeof module === 'object' && module.exports) {\n      module.exports = factory(require('es6-promise'), require('base-64'), require('utf8'), require('axios'));\n   } else {\n      root.Github = factory(root.Promise, root.base64, root.utf8, root.axios);\n   }\n}(this, function(Promise, Base64, Utf8, axios) { // jshint ignore:line\n   function b64encode(string) {\n      return Base64.encode(Utf8.encode(string));\n   }\n\n   if (Promise.polyfill) {\n      Promise.polyfill();\n   }\n\n   // Initial Setup\n   // -------------\n\n   var Github = function (options) {\n      options = options || {};\n\n      var API_URL = options.apiUrl || 'https://api.github.com';\n\n      // HTTP Request Abstraction\n      // =======\n      //\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\n\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\n         function getURL() {\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\n\n            url += ((/\\?/).test(url) ? '&' : '?');\n\n            if (data && typeof data === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\n               for(var param in data) {\n                  if (data.hasOwnProperty(param)) {\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\n                  }\n               }\n            }\n\n            return url.replace(/(&timestamp=\\d+)/, '') +\n               (typeof window !== 'undefined' ? '&timestamp=' + new Date().getTime() : '');\n         }\n\n         var config = {\n            headers: {\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n               'Content-Type': 'application/json;charset=UTF-8'\n            },\n            method: method,\n            data: data ? data : {},\n            url: getURL()\n         };\n\n         if ((options.token) || (options.username && options.password)) {\n            config.headers.Authorization = options.token ?\n            'token ' + options.token :\n            'Basic ' + b64encode(options.username + ':' + options.password);\n         }\n\n         return axios(config)\n            .then(function (response) {\n               cb(\n                  null,\n                  response.data || true,\n                  response.request\n               );\n            }, function (response) {\n               if (response.status === 304) {\n                  cb(\n                     null,\n                     response.data || true,\n                     response.request\n                  );\n               } else {\n                  cb({\n                     path: path,\n                     request: response.request,\n                     error: response.status\n                  });\n               }\n            });\n      };\n\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, cb) {\n         var results = [];\n\n         (function iterate() {\n            _request('GET', path, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (!(res instanceof Array)) {\n                  res = [res];\n               }\n\n               results.push.apply(results, res);\n\n               var next = (xhr.getResponseHeader('link') || '')\n                  .split(',')\n                  .filter(function(link) {\n                     return /rel=\"next\"/.test(link);\n                  })\n                  .map(function(link) {\n                     return (/<(.*)>/.exec(link) || [])[1];\n                  })\n                  .pop();\n\n               if (!next) {\n                  cb(err, results, xhr);\n               } else {\n                  path = next;\n                  iterate();\n               }\n            });\n         })();\n      };\n\n      // User API\n      // =======\n\n      Github.User = function () {\n         this.repos = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n\n            var url = '/user/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, cb);\n         };\n\n         // List user organizations\n         // -------\n\n         this.orgs = function (cb) {\n            _request('GET', '/user/orgs', null, cb);\n         };\n\n         // List authenticated user's gists\n         // -------\n\n         this.gists = function (cb) {\n            _request('GET', '/gists', null, cb);\n         };\n\n         // List authenticated user's unread notifications\n         // -------\n\n         this.notifications = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n            var url = '/notifications';\n            var params = [];\n\n            if (options.all) {\n               params.push('all=true');\n            }\n\n            if (options.participating) {\n               params.push('participating=true');\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.before) {\n               var before = options.before;\n\n               if (before.constructor === Date) {\n                  before = before.toISOString();\n               }\n\n               params.push('before=' + encodeURIComponent(before));\n            }\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Show user information\n         // -------\n\n         this.show = function (username, cb) {\n            var command = username ? '/users/' + username : '/user';\n\n            _request('GET', command, null, cb);\n         };\n\n         // List user repositories\n         // -------\n\n         this.userRepos = function (username, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            var url = '/users/' + username + '/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, cb);\n         };\n\n         // List user starred repositories\n         // -------\n\n         this.userStarred = function (username, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/users/' + username + '/starred?type=all&per_page=100', cb);\n         };\n\n         // List a user's gists\n         // -------\n\n         this.userGists = function (username, cb) {\n            _request('GET', '/users/' + username + '/gists', null, cb);\n         };\n\n         // List organization repositories\n         // -------\n\n         this.orgRepos = function (orgname, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/orgs/' + orgname + '/repos?type=all&&page_num=1000&sort=updated&direction=desc', cb);\n         };\n\n         // Follow user\n         // -------\n\n         this.follow = function (username, cb) {\n            _request('PUT', '/user/following/' + username, null, cb);\n         };\n\n         // Unfollow user\n         // -------\n\n         this.unfollow = function (username, cb) {\n            _request('DELETE', '/user/following/' + username, null, cb);\n         };\n\n         // Create a repo\n         // -------\n         this.createRepo = function (options, cb) {\n            _request('POST', '/user/repos', options, cb);\n         };\n      };\n\n      // Repository API\n      // =======\n\n      Github.Repository = function (options) {\n         var repo = options.name;\n         var user = options.user;\n         var fullname = options.fullname;\n\n         var that = this;\n         var repoPath;\n\n         if (fullname) {\n            repoPath = '/repos/' + fullname;\n         } else {\n            repoPath = '/repos/' + user + '/' + repo;\n         }\n\n         var currentTree = {\n            branch: null,\n            sha: null\n         };\n\n         // Uses the cache if branch has not been changed\n         // -------\n\n         function updateTree(branch, cb) {\n            if (branch === currentTree.branch && currentTree.sha) {\n               return cb(null, currentTree.sha);\n            }\n\n            that.getRef('heads/' + branch, function (err, sha) {\n               currentTree.branch = branch;\n               currentTree.sha = sha;\n               cb(err, sha);\n            });\n         }\n\n         // Get a particular reference\n         // -------\n\n         this.getRef = function (ref, cb) {\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.object.sha, xhr);\n            });\n         };\n\n         // Create a new reference\n         // --------\n         //\n         // {\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n         // }\n\n         this.createRef = function (options, cb) {\n            _request('POST', repoPath + '/git/refs', options, cb);\n         };\n\n         // Delete a reference\n         // --------\n         //\n         // Repo.deleteRef('heads/gh-pages')\n         // repo.deleteRef('tags/v1.0')\n\n         this.deleteRef = function (ref, cb) {\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, cb);\n         };\n\n         // Delete a repo\n         // --------\n\n         this.deleteRepo = function (cb) {\n            _request('DELETE', repoPath, options, cb);\n         };\n\n         // List all tags of a repository\n         // -------\n\n         this.listTags = function (cb) {\n            _request('GET', repoPath + '/tags', null, cb);\n         };\n\n         // List all pull requests of a respository\n         // -------\n\n         this.listPulls = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/pulls';\n            var params = [];\n\n            if (typeof options === 'string') {\n               // Backward compatibility\n               params.push('state=' + options);\n            } else {\n               if (options.state) {\n                  params.push('state=' + encodeURIComponent(options.state));\n               }\n\n               if (options.head) {\n                  params.push('head=' + encodeURIComponent(options.head));\n               }\n\n               if (options.base) {\n                  params.push('base=' + encodeURIComponent(options.base));\n               }\n\n               if (options.sort) {\n                  params.push('sort=' + encodeURIComponent(options.sort));\n               }\n\n               if (options.direction) {\n                  params.push('direction=' + encodeURIComponent(options.direction));\n               }\n\n               if (options.page) {\n                  params.push('page=' + options.page);\n               }\n\n               if (options.per_page) {\n                  params.push('per_page=' + options.per_page);\n               }\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Gets details for a specific pull request\n         // -------\n\n         this.getPull = function (number, cb) {\n            _request('GET', repoPath + '/pulls/' + number, null, cb);\n         };\n\n         // Retrieve the changes made between base and head\n         // -------\n\n         this.compare = function (base, head, cb) {\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, cb);\n         };\n\n         // List all branches of a repository\n         // -------\n\n         this.listBranches = function (cb) {\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               heads = heads.map(function (head) {\n                  return head.ref.replace(/^refs\\/heads\\//, '');\n               });\n\n               cb(null, heads, xhr);\n            });\n         };\n\n         // Retrieve the contents of a blob\n         // -------\n\n         this.getBlob = function (sha, cb) {\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getCommit = function (branch, sha, cb) {\n            _request('GET', repoPath + '/git/commits/' + sha, null, cb);\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getSha = function (branch, path, cb) {\n            if (!path || path === '') {\n               return that.getRef('heads/' + branch, cb);\n            }\n\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''),\n               null, function (err, pathContent, xhr) {\n                  if (err) {\n                     return cb(err);\n                  }\n\n                  cb(null, pathContent.sha, xhr);\n               });\n         };\n\n         // Get the statuses for a particular SHA\n         // -------\n\n         this.getStatuses = function (sha, cb) {\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\n         };\n\n         // Retrieve the tree a commit points to\n         // -------\n\n         this.getTree = function (tree, cb) {\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.tree, xhr);\n            });\n         };\n\n         // Post a new blob object, getting a blob SHA back\n         // -------\n\n         this.postBlob = function (content, cb) {\n            if (typeof content === 'string') {\n               content = {\n                  content: content,\n                  encoding: 'utf-8'\n               };\n            } else {\n               content = {\n                  content: b64encode(content),\n                  encoding: 'base64'\n               };\n            }\n\n            _request('POST', repoPath + '/git/blobs', content, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Update an existing tree adding a new blob object getting a tree SHA back\n         // -------\n\n         this.updateTree = function (baseTree, path, blob, cb) {\n            var data = {\n               base_tree: baseTree,\n               tree: [\n                  {\n                     path: path,\n                     mode: '100644',\n                     type: 'blob',\n                     sha: blob\n                  }\n               ]\n            };\n\n            _request('POST', repoPath + '/git/trees', data, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Post a new tree object having a file path pointer replaced\n         // with a new blob SHA getting a tree SHA back\n         // -------\n\n         this.postTree = function (tree, cb) {\n            _request('POST', repoPath + '/git/trees', {\n               tree: tree\n            }, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Create a new commit object with the current commit SHA as the parent\n         // and the new tree SHA, getting a commit SHA back\n         // -------\n\n         this.commit = function (parent, tree, message, cb) {\n            var user = new Github.User();\n\n            user.show(null, function (err, userData) {\n               if (err) {\n                  return cb(err);\n               }\n\n               var data = {\n                  message: message,\n                  author: {\n                     name: options.user,\n                     email: userData.email\n                  },\n                  parents: [\n                     parent\n                  ],\n                  tree: tree\n               };\n\n               _request('POST', repoPath + '/git/commits', data, function (err, res, xhr) {\n                  if (err) {\n                     return cb(err);\n                  }\n\n                  currentTree.sha = res.sha; // Update latest commit\n\n                  cb(null, res.sha, xhr);\n               });\n            });\n         };\n\n         // Update the reference of your head to point to the new commit SHA\n         // -------\n\n         this.updateHead = function (head, commit, cb) {\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\n               sha: commit\n            }, cb);\n         };\n\n         // Show repository information\n         // -------\n\n         this.show = function (cb) {\n            _request('GET', repoPath, null, cb);\n         };\n\n         // Show repository contributors\n         // -------\n\n         this.contributors = function (cb, retry) {\n            retry = retry || 1000;\n            var that = this;\n\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (xhr.status === 202) {\n                  setTimeout(\n                     function () {\n                        that.contributors(cb, retry);\n                     },\n                     retry\n                  );\n               } else {\n                  cb(err, data, xhr);\n               }\n            });\n         };\n\n         // Show repository collaborators\n         // -------\n\n         this.collaborators = function (cb) {\n            _request('GET', repoPath + '/collaborators', null, cb);\n         };\n\n         // Check whether user is a collaborator on the repository\n         // -------\n\n         this.isCollaborator = function (username, cb) {\n            _request('GET', repoPath + '/collaborators/' + username, null, cb);\n         };\n\n         // Get contents\n         // --------\n\n         this.contents = function (ref, path, cb) {\n            path = encodeURI(path);\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\n               ref: ref\n            }, cb);\n         };\n\n         // Fork repository\n         // -------\n\n         this.fork = function (cb) {\n            _request('POST', repoPath + '/forks', null, cb);\n         };\n\n         // List forks\n         // --------\n\n         this.listForks = function (cb) {\n            _request('GET', repoPath + '/forks', null, cb);\n         };\n\n         // Branch repository\n         // --------\n\n         this.branch = function (oldBranch, newBranch, cb) {\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\n               cb = newBranch;\n               newBranch = oldBranch;\n               oldBranch = 'master';\n            }\n\n            this.getRef('heads/' + oldBranch, function (err, ref) {\n               if (err && cb) {\n                  return cb(err);\n               }\n\n               that.createRef({\n                  ref: 'refs/heads/' + newBranch,\n                  sha: ref\n               }, cb);\n            });\n         };\n\n         // Create pull request\n         // --------\n\n         this.createPullRequest = function (options, cb) {\n            _request('POST', repoPath + '/pulls', options, cb);\n         };\n\n         // List hooks\n         // --------\n\n         this.listHooks = function (cb) {\n            _request('GET', repoPath + '/hooks', null, cb);\n         };\n\n         // Get a hook\n         // --------\n\n         this.getHook = function (id, cb) {\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Create a hook\n         // --------\n\n         this.createHook = function (options, cb) {\n            _request('POST', repoPath + '/hooks', options, cb);\n         };\n\n         // Edit a hook\n         // --------\n\n         this.editHook = function (id, options, cb) {\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\n         };\n\n         // Delete a hook\n         // --------\n\n         this.deleteHook = function (id, cb) {\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Read file at given path\n         // -------\n\n         this.read = function (branch, path, cb) {\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''),\n               null, cb, true);\n         };\n\n         // Remove a file\n         // -------\n\n         this.remove = function (branch, path, cb) {\n            that.getSha(branch, path, function (err, sha) {\n               if (err) {\n                  return cb(err);\n               }\n\n               _request('DELETE', repoPath + '/contents/' + path, {\n                  message: path + ' is removed',\n                  sha: sha,\n                  branch: branch\n               }, cb);\n            });\n         };\n\n         // Alias for repo.remove for backwards comapt.\n         // -------\n         this.delete = this.remove;\n\n         // Move a file to a new location\n         // -------\n\n         this.move = function (branch, path, newPath, cb) {\n            updateTree(branch, function (err, latestCommit) {\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\n                  // Update Tree\n                  tree.forEach(function (ref) {\n                     if (ref.path === path) {\n                        ref.path = newPath;\n                     }\n\n                     if (ref.type === 'tree') {\n                        delete ref.sha;\n                     }\n                  });\n\n                  that.postTree(tree, function (err, rootTree) {\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\n                        that.updateHead(branch, commit, cb);\n                     });\n                  });\n               });\n            });\n         };\n\n         // Write file contents to a given branch and path\n         // -------\n\n         this.write = function (branch, path, content, message, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            that.getSha(branch, encodeURI(path), function (err, sha) {\n               var writeOptions = {\n                  message: message,\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\n                  branch: branch,\n                  committer: options && options.committer ? options.committer : undefined,\n                  author: options && options.author ? options.author : undefined\n               };\n\n               // If no error, we set the sha to overwrite an existing file\n               if (!(err && err.error !== 404)) {\n                  writeOptions.sha = sha;\n               }\n\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\n            });\n         };\n\n         // List commits on a repository. Takes an object of optional parameters:\n         // sha: SHA or branch to start listing commits from\n         // path: Only commits containing this file path will be returned\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\n         // since: ISO 8601 date - only commits after this date will be returned\n         // until: ISO 8601 date - only commits before this date will be returned\n         // -------\n\n         this.getCommits = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/commits';\n            var params = [];\n\n            if (options.sha) {\n               params.push('sha=' + encodeURIComponent(options.sha));\n            }\n\n            if (options.path) {\n               params.push('path=' + encodeURIComponent(options.path));\n            }\n\n            if (options.author) {\n               params.push('author=' + encodeURIComponent(options.author));\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.until) {\n               var until = options.until;\n\n               if (until.constructor === Date) {\n                  until = until.toISOString();\n               }\n\n               params.push('until=' + encodeURIComponent(until));\n            }\n\n            if (options.page) {\n               params.push('page=' + options.page);\n            }\n\n            if (options.perpage) {\n               params.push('per_page=' + options.perpage);\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Check if a repository is starred.\n         // --------\n\n         this.isStarred = function(owner, repository, cb) {\n            _request('GET', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Star a repository.\n         // --------\n\n         this.star = function(owner, repository, cb) {\n            _request('PUT', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Unstar a repository.\n         // --------\n\n         this.unstar = function(owner, repository, cb) {\n            _request('DELETE', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Create a new release\n         // --------\n\n         this.createRelease = function(options, cb) {\n            _request('POST', repoPath + '/releases', options, cb);\n         };\n\n         // Edit a release\n         // --------\n\n         this.editRelease = function(id, options, cb) {\n            _request('PATCH', repoPath + '/releases/' + id, options, cb);\n         };\n\n         // Get a single release\n         // --------\n\n         this.getRelease = function(id, cb) {\n            _request('GET', repoPath + '/releases/' + id, null, cb);\n         };\n\n         // Remove a release\n         // --------\n\n         this.deleteRelease = function(id, cb) {\n            _request('DELETE', repoPath + '/releases/' + id, null, cb);\n         };\n      };\n\n      // Gists API\n      // =======\n\n      Github.Gist = function (options) {\n         var id = options.id;\n         var gistPath = '/gists/' + id;\n\n         // Read the gist\n         // --------\n\n         this.read = function (cb) {\n            _request('GET', gistPath, null, cb);\n         };\n\n         // Create the gist\n         // --------\n         // {\n         //  \"description\": \"the description for this gist\",\n         //    \"public\": true,\n         //    \"files\": {\n         //      \"file1.txt\": {\n         //        \"content\": \"String file contents\"\n         //      }\n         //    }\n         // }\n\n         this.create = function (options, cb) {\n            _request('POST', '/gists', options, cb);\n         };\n\n         // Delete the gist\n         // --------\n\n         this.delete = function (cb) {\n            _request('DELETE', gistPath, null, cb);\n         };\n\n         // Fork a gist\n         // --------\n\n         this.fork = function (cb) {\n            _request('POST', gistPath + '/fork', null, cb);\n         };\n\n         // Update a gist with the new stuff\n         // --------\n\n         this.update = function (options, cb) {\n            _request('PATCH', gistPath, options, cb);\n         };\n\n         // Star a gist\n         // --------\n\n         this.star = function (cb) {\n            _request('PUT', gistPath + '/star', null, cb);\n         };\n\n         // Untar a gist\n         // --------\n\n         this.unstar = function (cb) {\n            _request('DELETE', gistPath + '/star', null, cb);\n         };\n\n         // Check if a gist is starred\n         // --------\n\n         this.isStarred = function (cb) {\n            _request('GET', gistPath + '/star', null, cb);\n         };\n      };\n\n      // Issues API\n      // ==========\n\n      Github.Issue = function (options) {\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\n\n         this.create = function(options, cb) {\n            _request('POST', path, options, cb);\n         };\n\n         this.list = function (options, cb) {\n            var query = [];\n\n            for(var key in options) {\n               if (options.hasOwnProperty(key)) {\n                  query.push(encodeURIComponent(key) + '=' + encodeURIComponent(options[key]));\n               }\n            }\n\n            _requestAllPages(path + '?' + query.join('&'), cb);\n         };\n\n         this.comment = function (issue, comment, cb) {\n            _request('POST', issue.comments_url, {\n               body: comment\n            }, cb);\n         };\n\n         this.edit = function (issue, options, cb) {\n            _request('PATCH', path + '/' + issue, options, cb);\n         };\n\n         this.get = function (issue, cb) {\n            _request('GET', path + '/' + issue, null, cb);\n         };\n      };\n\n      // Search API\n      // ==========\n\n      Github.Search = function (options) {\n         var path = '/search/';\n         var query = '?q=' + options.query;\n\n         this.repositories = function (options, cb) {\n            _request('GET', path + 'repositories' + query, options, cb);\n         };\n\n         this.code = function (options, cb) {\n            _request('GET', path + 'code' + query, options, cb);\n         };\n\n         this.issues = function (options, cb) {\n            _request('GET', path + 'issues' + query, options, cb);\n         };\n\n         this.users = function (options, cb) {\n            _request('GET', path + 'users' + query, options, cb);\n         };\n      };\n\n      // Rate Limit API\n      // ==========\n\n      Github.RateLimit = function() {\n         this.getRateLimit = function(cb) {\n            _request('GET', '/rate_limit', null, cb);\n         };\n      };\n\n      return Github;\n   };\n\n   // Top Level API\n   // -------\n\n   Github.getIssues = function (user, repo) {\n      return new Github.Issue({\n         user: user,\n         repo: repo\n      });\n   };\n\n   Github.getRepo = function (user, repo) {\n      if (!repo) {\n         return new Github.Repository({\n            fullname: user\n         });\n      } else {\n         return new Github.Repository({\n            user: user,\n            name: repo\n         });\n      }\n   };\n\n   Github.getUser = function () {\n      return new Github.User();\n   };\n\n   Github.getGist = function (id) {\n      return new Github.Gist({\n         id: id\n      });\n   };\n\n   Github.getSearch = function (query) {\n      return new Github.Search({\n         query: query\n      });\n   };\n\n   Github.getRateLimit = function() {\n      return new Github.RateLimit();\n   };\n\n   return Github;\n}));\n"],"sourceRoot":"/source/"}